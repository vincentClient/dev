"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = require("cheerio");
const request = require("request-promise-native");
const static_token_enum_1 = require("./enums/static-token.enum");
const build_information_1 = require("./models/build-information/build-information");
const access_token_1 = require("./models/login/access-token");
const launcher_url_helper_1 = require("./utils/launcher-url-helper");
/**
 * Covers endpoints accessible from within the Epic Games launcher
 */
class LauncherClient {
    /**
     * Creates a new LauncherClient instance.
     * @param credentials The account's credentials which shall be used for the REST requests.
     * @param options Library specific options (such as a response timeout until it throws an exception).
     */
    constructor(credentials, options) {
        this.clientId = '24a1bff3f90749efbfcbc576c626a282';
        this.redirectUri = 'https://accounts.launcher-website-prod07.ol.epicgames.com/login' +
            `/showPleaseWait?client_id=${this.clientId}&rememberEmail=false`;
        this.apiRequest = request.defaults({
            method: 'GET',
            timeout: options.timeoutMs,
            proxy: options.proxy,
            rejectUnauthorized: false,
            json: true,
            resolveWithFullResponse: true,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
            },
            jar: true,
            gzip: true
        });
        this.credentials = credentials;
    }
    async buildInformation() {
        const targetUrl = `${launcher_url_helper_1.LauncherUrlHelper.publicAssets}/Windows`;
        const queryParams = {
            label: 'Live'
        };
        const response = await this.apiRequest(targetUrl, {
            qs: queryParams
        });
        return build_information_1.BuildInformation.FROM_JSON(response.body[0]);
    }
    async login() {
        await this.fetchRedirectCookies();
        const xsrfDetails = await this.fetchLoginForm();
        await this.doLauncherLogin(xsrfDetails);
        const exchangeCode = await this.fetchExchangeCode();
        const oAuthToken = await this.getOauthToken(exchangeCode);
        // Insert auth token into default request
        this.updateClientAccessToken(oAuthToken);
    }
    async fetchRedirectCookies() {
        const targetUrl = `${launcher_url_helper_1.LauncherUrlHelper.login}/launcher`;
        const queryParams = {
            client_id: this.clientId,
            redirectUrl: this.redirectUri,
            isLauncher: true
        };
        try {
            await this.apiRequest(targetUrl, {
                qs: queryParams
            });
        }
        catch (err) {
            console.error(`Error while fetching redirect cookies in launcher login: ${err}`);
        }
    }
    async fetchLoginForm() {
        const targetUrl = `${launcher_url_helper_1.LauncherUrlHelper.login}/doLauncherLogin`;
        const queryParams = {
            client_id: this.clientId,
            redirectUrl: this.redirectUri
        };
        const response = await this.apiRequest(targetUrl, {
            qs: queryParams
        });
        const $ = cheerio.load(response.body);
        const xsrfToken = $('#X-XSRF-TOKEN').val();
        const xsrfUri = $('#X-XSRF-URI').val();
        return { xsrfToken, xsrfUri };
    }
    async doLauncherLogin(xsrf) {
        const targetUrl = `${launcher_url_helper_1.LauncherUrlHelper.login}/doLauncherLogin`;
        const queryParams = {
            'X-XSRF-TOKEN': xsrf.xsrfToken,
            'X-XSRF-URI': xsrf.xsrfUri,
            fromForm: 'yes',
            authType: '',
            linkExtAuth: '',
            client_id: this.clientId,
            redirectUrl: this.redirectUri,
            epic_username: this.credentials.email,
            password: this.credentials.password
        };
        await this.apiRequest(targetUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            form: queryParams
        });
    }
    async fetchExchangeCode() {
        const response = await this.apiRequest(this.redirectUri, {
            headers: {
                'Accept-Language': 'en-US'
            }
        });
        const regex = /loginWithExchangeCode\('([a-z0-9]*)'/;
        return regex.exec(response.body)[1];
    }
    async getOauthToken(exchangeCode) {
        const requestTokenConfig = {
            grant_type: 'exchange_code',
            exchange_code: exchangeCode,
            includePerms: true,
            token_type: 'eg1'
        };
        const oAuthTokenResponse = await this.apiRequest(launcher_url_helper_1.LauncherUrlHelper.oauthToken, {
            headers: {
                'Accept-Language': 'en-US',
                Authorization: `basic ${static_token_enum_1.LoginToken.Launcher}`
            },
            method: 'POST',
            form: requestTokenConfig,
            jar: false
        });
        return access_token_1.AccessToken.FROM_JSON(oAuthTokenResponse.body);
    }
    /**
     * Updates the default auth header for client requests and sets the property
     * @param token The new client access token
     */
    updateClientAccessToken(token) {
        this.apiRequest = this.apiRequest.defaults({
            headers: {
                Authorization: `bearer ${token.accessToken}`
            }
        });
    }
}
exports.LauncherClient = LauncherClient;
//# sourceMappingURL=launcher-client.js.map