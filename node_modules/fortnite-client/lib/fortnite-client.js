"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request-promise-native");
const static_token_enum_1 = require("./enums/static-token.enum");
const time_window_enum_1 = require("./enums/time-window.enum");
const leaderboard_1 = require("./models/leaderboard/leaderboard");
const access_token_1 = require("./models/login/access-token");
const oauth_exchange_1 = require("./models/login/oauth-exchange");
const lookup_1 = require("./models/lookup/lookup");
const welcome_1 = require("./models/news/welcome");
const player_stats_1 = require("./models/stats/player-stats");
const status_1 = require("./models/status/status");
const store_1 = require("./models/store/store");
const fortnite_url_helper_1 = require("./utils/fortnite-url-helper");
/**
 * Fortnite client
 */
class FortniteClient {
    /**
     * Creates a new fortnite client instance.
     * @param credentials The account's credentials which shall be used for the REST requests.
     * @param options Library specific options (such as a response timeout until it throws an exception).
     */
    constructor(credentials, options) {
        const defaultOptions = {
            timeoutMs: 5 * 1000,
            proxy: null
        };
        const fullOptions = Object.assign({}, defaultOptions, options);
        this.apiRequest = request.defaults({
            method: 'GET',
            timeout: fullOptions.timeoutMs,
            proxy: fullOptions.proxy,
            rejectUnauthorized: false,
            json: true,
            resolveWithFullResponse: true,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
            }
        });
        this.credentials = credentials;
    }
    static async CHECK_STATUS() {
        const statusResponse = await request.get({
            url: fortnite_url_helper_1.FortniteURLHelper.serviceStatus,
            timeout: 5 * 1000,
            json: true,
            resolveWithFullResponse: true
        });
        const statusResponseBody = statusResponse.body;
        return status_1.Status.FROM_JSON(statusResponseBody[0]);
    }
    static async GET_GAME_NEWS(locale = 'en-US') {
        const statusResponse = await request.get({
            url: fortnite_url_helper_1.FortniteURLHelper.gameNews,
            timeout: 5 * 1000,
            json: true,
            resolveWithFullResponse: true,
            headers: {
                'Accept-Region': 'EU',
                'Accept-Language': locale
            }
        });
        return welcome_1.Welcome.FROM_JSON(statusResponse.body);
    }
    async login() {
        this.launcherAccessToken = await this.requestAccessToken();
        /* istanbul ignore next */
        setTimeout(async () => this.onTokenExpired(this.launcherAccessToken, static_token_enum_1.LoginToken.Launcher), this.launcherAccessToken.expiresIn * 1000 - 15 * 1000);
        const oAuthExchange = await this.requestOAuthExchange(this.launcherAccessToken);
        const clientAccessToken = await this.requestOAuthToken(oAuthExchange.code);
        this.updateClientAccessToken(clientAccessToken);
        /* istanbul ignore next */
        setTimeout(async () => this.onTokenExpired(this.clientAccessToken, static_token_enum_1.LoginToken.Fortnite), this.clientAccessToken.expiresIn * 1000 - 15 * 1000);
        await this.killOtherSessions();
    }
    async getBattleRoyaleStatsById(userId, timeWindow = time_window_enum_1.TimeWindow.Alltime) {
        const playerStats = await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.GET_PLAYER_PROFILE_REQUEST_URL(userId, timeWindow)
        });
        const playerStatsBody = playerStats.body;
        const preparedObject = {
            stats: playerStatsBody
        };
        return player_stats_1.PlayerStats.FROM_JSON(preparedObject);
    }
    async getLeaderboards(leaderboardType, platform, groupType, timeWindow = time_window_enum_1.TimeWindow.Alltime, pageNumber = 0, limit = 50) {
        const params = { ownertype: 1, pageNumber, itemsPerPage: limit };
        const leaderboardsResponse = await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.GET_LEADERBOARDS_URL(leaderboardType, platform, groupType, timeWindow),
            method: 'POST',
            qs: params,
            body: []
        });
        return leaderboard_1.Leaderboard.FROM_JSON(leaderboardsResponse.body);
    }
    async getStore(locale = 'en-US') {
        const storeResponse = await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.store,
            headers: {
                'X-EpicGames-Language': locale
            }
        });
        return store_1.Store.FROM_JSON(storeResponse.body);
    }
    /**
     * Checks if a player with the given name exists. If it exists, it will return the playerId
     * @param username Full text playername (e. g. 'NinjasHyper')
     */
    async lookup(username) {
        const targetUrl = fortnite_url_helper_1.FortniteURLHelper.lookup;
        const params = { q: username };
        const lookupResponse = await this.apiRequest({
            url: targetUrl,
            qs: params
        });
        return lookup_1.Lookup.FROM_JSON(lookupResponse.body);
    }
    /**
     * Updates the default auth header for client requests and sets the property
     * @param token The new client access token
     */
    updateClientAccessToken(token) {
        this.clientAccessToken = token;
        this.apiRequest = this.apiRequest.defaults({
            headers: {
                Authorization: `bearer ${token.accessToken}`
            }
        });
    }
    /* istanbul ignore next */
    async onTokenExpired(token, secretKey) {
        const refreshedToken = await this.refreshToken(token, secretKey);
        switch (secretKey) {
            case static_token_enum_1.LoginToken.Fortnite:
                this.updateClientAccessToken(refreshedToken);
                break;
            case static_token_enum_1.LoginToken.Launcher:
                this.launcherAccessToken = refreshedToken;
                break;
            default:
                throw new Error('Expired token could not be identified by comparing the secret key');
        }
        setTimeout(async () => this.onTokenExpired(refreshedToken, secretKey), refreshedToken.expiresIn * 1000 - 15 * 1000);
    }
    /**
     * Required to send right after successful login, when logging in frequently
     */
    async killOtherSessions() {
        await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.killOtherSessions,
            form: { killType: 'OTHERS_ACCOUNT_CLIENT_SERVICE' },
            method: 'DELETE'
        });
    }
    /* istanbul ignore next */
    async refreshToken(token, secretKey) {
        const tokenRequestConfig = {
            grant_type: 'refresh_token',
            refresh_token: token.refreshToken,
            includePerms: true
        };
        const refreshTokenResponse = await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.oAuthToken,
            headers: {
                Authorization: `basic ${secretKey}`
            },
            form: tokenRequestConfig,
            method: 'POST'
        });
        return access_token_1.AccessToken.FROM_JSON(refreshTokenResponse.body);
    }
    async requestOAuthToken(authCode) {
        const requestTokenConfig = {
            grant_type: 'exchange_code',
            exchange_code: authCode,
            includePerms: true,
            token_type: 'eg1'
        };
        const oAuthTokenResponse = await this.apiRequest({
            url: fortnite_url_helper_1.FortniteURLHelper.oAuthToken,
            headers: {
                Authorization: `basic ${static_token_enum_1.LoginToken.Fortnite}`
            },
            form: requestTokenConfig,
            method: 'POST'
        });
        return access_token_1.AccessToken.FROM_JSON(oAuthTokenResponse.body);
    }
    async requestOAuthExchange(accessToken) {
        const oAuthExchangeResponse = await this.apiRequest(fortnite_url_helper_1.FortniteURLHelper.oAuthExchange, {
            headers: {
                Authorization: `bearer ${accessToken.accessToken}`
            }
        });
        return oauth_exchange_1.OAuthExchange.FROM_JSON(oAuthExchangeResponse.body);
    }
    /**
     * Request Login Token after (logging in with password)
     */
    async requestAccessToken() {
        const requestTokenConfig = {
            grant_type: 'password',
            username: this.credentials.email,
            password: this.credentials.password,
            includePerms: true
        };
        const accessTokenResponse = await this.apiRequest(fortnite_url_helper_1.FortniteURLHelper.oAuthToken, {
            form: requestTokenConfig,
            headers: {
                Authorization: `basic ${static_token_enum_1.LoginToken.Launcher}`
            },
            method: 'POST'
        });
        return access_token_1.AccessToken.FROM_JSON(accessTokenResponse.body);
    }
}
exports.FortniteClient = FortniteClient;
//# sourceMappingURL=fortnite-client.js.map